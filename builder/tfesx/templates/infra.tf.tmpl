###########################################################
# LAFORGE GENERATED TERRAFORM CONFIGURATION
# -- WARNING --
# This file is automatically generated. Do not edit it's
# contents directly. Use Laforge and re build this file.
###########################################################

provider "vsphere" {
	vsphere_server = "{{ index $.Build.Config "vsphere_server" }}"
	user = "{{ index $.Build.Config "vsphere_user" }}"
    password = "{{ index $.Build.Config "vsphere_password" }}"
	allow_unverified_ssl = true
}

# hard corded dc
data "vsphere_datacenter" "dc" {
	name = "ESXI"
}

# hard coded datastore
data "vsphere_datastore" "datastore" {
	name = "datastore1"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard corded resource pool
data "vsphere_resource_pool" "pool" {
	name = "Resources"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard coded distributed switch
data "vsphere_distributed_virtual_switch" "dvs" {
	name = "DSwitch"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard coded template reference
data "vsphere_virtual_machine" "ubuntu18" {
	name = "Template-Ubuntu 18"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard coded template reference
data "vsphere_virtual_machine" "win10" {
	name = "Template-Windows 10"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard coded template reference
data "vsphere_virtual_machine" "w2k16" {
	name = "Template-Windows Server 2016"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard coded default network
data "vsphere_network" "network" {
	name = "VM Network"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard code salt-master address
variable "salt-master" {
	type = string
	default = "10.0.0.2"
}
# loop to create port groups
{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
{{ $net := $pnet.Network }}
{{ $netname := $net.Path }}
resource "vsphere_distributed_port_group" "pg-t{{ $.Team.TeamNumber }}-{{ $net.Base }}" {
	name = "t{{ $.Team.TeamNumber }}-{{ $net.Base }}"
	distributed_virtual_switch_uuid = "${data.vsphere_distributed_virtual_switch.dvs.id}"
	vlan_id = {{ $.Team.TeamNumber }}{{ index $net.Vars "vlan_id" }}
}
{{ end }}

# make parent folder
resource "vsphere_folder" "team-{{ $.Team.TeamNumber }}" {
	path = "Team {{ $.Team.TeamNumber }}"
	type = "vm"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# loop to create sub folders
{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
{{ $net := $pnet.Network }}
{{ $netname := $net.Path }}
resource "vsphere_folder" "team-{{ $.Team.TeamNumber }}-{{ $net.Base }}" {
	path = "${vsphere_folder.team-{{ $.Team.TeamNumber }}.path}/{{ $net.Base }}" 
	type = "vm"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}
{{ end }}

# loop virtual machines
{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
  {{ $netobj := $pnet.Network }}
  {{ range $phostid, $phost := $pnet.ProvisionedHosts }}
    {{ $host := $phost.Host }}
    {{ $resource_name := printf "%s-t%d-%s-%s" $.Environment.Base $.Team.TeamNumber $netobj.Base $host.Base }}

# hard coded vm specifications, use map
    resource "vsphere_virtual_machine" "{{ $resource_name }}" {
      name = "{{ $resource_name }}"
	  resource_pool_id = "${data.vsphere_resource_pool.pool.id}"
	  datastore_id = "${data.vsphere_datastore.datastore.id}"
	  num_cpus = {{ index $host.Vars "vmcpu" }}
	  memory = {{ index $host.Vars "vmmem" }}
	  guest_id = "${data.vsphere_virtual_machine.{{ $host.OS }}.guest_id}"
	  scsi_type = "${data.vsphere_virtual_machine.{{ $host.OS }}.scsi_type}"
	  firmware = "${data.vsphere_virtual_machine.{{ $host.OS }}.firmware}"
	  wait_for_guest_net_timeout = 60
	  folder = "${vsphere_folder.team-{{ $.Team.TeamNumber }}.path}/{{ $netobj.Base }}"
	  network_interface {
		#network_id = "${vsphere_distributed_port_group.pg-t{{ $.Team.TeamNumber }}-{{ $netobj.Base }}.id}"
		network_id = "${data.vsphere_network.network.id}"
		adapter_type = "${data.vsphere_virtual_machine.{{ $host.OS }}.network_interface_types[0]}"
	  }
	  disk {
		size = "${data.vsphere_virtual_machine.{{ $host.OS }}.disks.0.size}"
		label = "t{{ $.Team.TeamNumber }}-{{ $netobj.Base }}-{{ $host.OS }}.vmdk"
      }
	  clone {
		template_uuid = "${data.vsphere_virtual_machine.{{ $host.OS }}.id}"
		timeout = 60
		customize {
			linux_options {
				host_name = "{{ $host.Hostname }}.{{ $netobj.Name }}.{{ $.Competition.DNS.RootDomain }}"
				domain = "{{ $.Competition.DNS.RootDomain }}"
			}
			network_interface {
				ipv4_address = "${vsphere_virtual_machine.{{ $resource_name }}.address}"
				ipv4_netmask = 24
			}
		}
	  }
	  provisioner "remote-exec" {
      	{{ if $host.IsWindows }}
		connection {
			host     = "${vsphere_virtual_machine.{{ $resource_name }}.address}"
			type     = "winrm"
			agent 	 = false
			insecure = true
			user     = "Administrator"
			timeout  = "60m"
			password = "{{ $phost.ActualPassword }}"
	  	}
	  	{{ else }}
		connection {
			agent       = "false"
			host        = "${vsphere_virtual_machine.{{ $resource_name }}.address}"
			type        = "ssh"
			user        = "root"
			timeout     = "60m"
			password  	= "{{ $phost.ActualPassword }}"
		}
	  	{{ end }}
		{{ if $host.IsWindows }}
		inline = [
			"powershell -ExecutionPolicy Bypass -NoLogo -NoProfile -Command \"Add-Content -Path C:/Windows/System32/drivers/etc/hosts -Value '${var.salt-master} salt '\"",
			"powershell -ExecutionPolicy Bypass -NoLogo -NoProfile -Command 'Invoke-WebRequest -OutFile bootstrap-salt.ps1 https://raw.githubusercontent.com/saltstack/salt-bootstrap/develop/bootstrap-salt.ps1'",
			"powershell -ExecutionPolicy Bypass -NoLogo -NoProfile -Command -File bootstrap-salt.ps1 -master salt"
		]
		{{ else }}
		inline = [
			"sudo echo '${var.salt-master} salt' >> /etc/hosts".
			"sudo curl -o bootstrap-salt.sh -L https://bootstrap.saltstack.com",
			"sudo sh bootstrap-salt.sh git develop"
		]
		{{ end }}
      }
    }

	{{ $phostrev := (index $.Laforge.StateManager.NewRevs $phostid) }}
    {{ $phostrev = $phostrev.TouchWithID $resource_name }}

    resource "local_file" "lfrev-{{ $resource_name }}-host" {
      content = {{ $phostrev.ToJSONString | hclstring }}
      filename = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/.provisioned_host.lfrevision"

      depends_on = [
        "vsphere_virtual_machine.{{ $resource_name }}",
      ]
    }

    resource "local_file" "{{ $resource_name }}_provisioning_file" {
      content = "${data.template_file.{{ $resource_name }}.rendered}"
      filename = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/conn.laforge"

      depends_on = [
        "vsphere_virtual_machine.{{ $resource_name }}",
      ]
    }

    {{ $phostconnrev := (index $.Laforge.StateManager.NewRevs $phost.Conn.Path) }}
    {{ $phostconnrev = $phostconnrev.TouchWithID $resource_name }}

    resource "local_file" "lfrev-{{ $resource_name }}-conn" {
      content = {{ $phostconnrev.ToJSONString | hclstring }}
      filename = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/.connection.lfrevision"

      depends_on = [
        "vsphere_virtual_machine.{{ $resource_name }}",
      ]
    }
  {{ end }}
{{ end }}

