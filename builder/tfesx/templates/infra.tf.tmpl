###########################################################
# LAFORGE GENERATED TERRAFORM CONFIGURATION
# -- WARNING --
# This file is automatically generated. Do not edit it's
# contents directly. Use Laforge and re build this file.
###########################################################

provider "vsphere" {
	vsphere_server = "{{ index $.Build.Config "vsphere_server" }}"
	user = "{{ index $.Build.Config "vsphere_user" }}"
    password = "{{ index $.Build.Config "vsphere_password" }}"
	allow_unverified_ssl = true
}

# hard corded dc
data "vsphere_datacenter" "dc" {
	name = "ESXI"
}

# hard coded datastore
data "vsphere_datastore" "datastore" {
	name = "datastore1"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard corded resource pool
data "vsphere_resource_pool" "pool" {
	name = "Resources"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard coded distributed switch
data "vsphere_distributed_virtual_switch" "dvs" {
	name = "DSwitch"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard coded template reference
data "vsphere_virtual_machine" "ubuntu18" {
	name = "Template-Ubuntu 18"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard coded template reference
data "vsphere_virtual_machine" "win10" {
	name = "Template-Windows 10"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# hard coded template reference
data "vsphere_virtual_machine" "w2k16" {
	name = "Template-Windows Server 2016"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# loop to create port groups
{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
{{ $net := $pnet.Network }}
{{ $netname := $net.Path }}
resource "vsphere_distributed_port_group" "pg-t{{ $.Team.TeamNumber }}-{{ $net.Base }}" {
 	name = "t{{ $.Team.TeamNumber }}-{{ $net.Base }}"
 	distributed_virtual_switch_uuid = "${data.vsphere_distributed_virtual_switch.dvs.id}"
 	vlan_id = {{ $.Team.TeamNumber }}{{ index $net.Vars "vlan_id" }}
}
{{ end }}

# make parent folder
resource "vsphere_folder" "team-{{ $.Team.TeamNumber }}" {
	path = "Team {{ $.Team.TeamNumber }}"
	type = "vm"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

# loop to create sub folders
{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
{{ $net := $pnet.Network }}
{{ $netname := $net.Path }}
resource "vsphere_folder" "team-{{ $.Team.TeamNumber }}-{{ $net.Base }}" {
 	path = "${vsphere_folder.team-{{ $.Team.TeamNumber }}.path}/{{ $net.Base }}" 
	type = "vm"
	datacenter_id = "${data.vsphere_datacenter.dc.id}"
}
{{ end }}

# loop virtual machines
{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
  {{ $netobj := $pnet.Network }}
  {{ range $phostid, $phost := $pnet.ProvisionedHosts }}
    {{ $host := $phost.Host }}
    {{ $resource_name := printf "%s-t%d-%s-%s" $.Environment.Base $.Team.TeamNumber $netobj.Base $host.Base }}

# hard coded vm specifications, use map
    resource "vsphere_virtual_machine" "{{ $resource_name }}" {
      name = "{{ $resource_name }}"
	  resource_pool_id = "${data.vsphere_resource_pool.pool.id}"
	  datastore_id = "${data.vsphere_datastore.datastore.id}"
	  num_cpus = {{ index $host.Vars "vmcpu" }}
	  memory = {{ index $host.Vars "vmmem" }}
	  guest_id = "${data.vsphere_virtual_machine.{{ $host.OS }}.guest_id}"
	  scsi_type = "${data.vsphere_virtual_machine.{{ $host.OS }}.scsi_type}"
	  firmware = "${data.vsphere_virtual_machine.{{ $host.OS }}.firmware}"
	  folder = "${vsphere_folder.team-{{ $.Team.TeamNumber }}.path}/{{ $netobj.Base }}"
	  network_interface {
		network_id = "${vsphere_distributed_port_group.pg-t{{ $.Team.TeamNumber }}-{{ $netobj.Base }}.id}"
	    adapter_type = "${data.vsphere_virtual_machine.{{ $host.OS }}.network_interface_types[0]}"
	  }
	  disk {
		size = "${data.vsphere_virtual_machine.{{ $host.OS }}.disks.0.size}"
		label = "t{{ $.Team.TeamNumber }}-{{ $netobj.Base }}-{{ $host.OS }}.vmdk"
      }
	  clone {
		template_uuid = "${data.vsphere_virtual_machine.{{ $host.OS }}.id}"
		timeout = 60
	  }
    }
  {{ end }}
{{ end }}

