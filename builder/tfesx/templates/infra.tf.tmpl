###########################################################
# LAFORGE GENERATED TERRAFORM CONFIGURATION
# -- WARNING --
# This file is automatically generated. Do not edit it's
# contents directly. Use Laforge and re build this file.
###########################################################

terraform {
  backend "etcdv3" {
    prefix = "{{ $.Team.ID }}/terraform.tfstate"
    endpoints = [
      "https://{{ index $.Build.Config "etcd_master" }}",
      "https://{{ index $.Build.Config "etcd_slave" }}",
    ]
    username = "{{ index $.Build.Config "etcd_username" }}"
    password = "{{ index $.Build.Config "etcd_password" }}"
  }
}

variable "vmsize" {
  type = "map"
  default = {
    "small" = "n1-standard-1"
    "medium" = "n1-standard-2"
    "large" = "n1-standard-4"
    "xlarge" = "n1-standard-32"
  }
}

variable "vmos" {
  type = "map"
  default = {
    "ubuntu16" = "ubuntu-os-cloud/ubuntu-1604-lts"
    "ubuntu18" = "ubuntu-os-cloud/ubuntu-1804-lts"
    "centos7" = "centos-cloud/centos-7"
    "centos6" = "centos-cloud/centos-6"
    "debian8" = "ubuntu-os-cloud/ubuntu-minimal-1804-lts"
    "debian9" = "debian-cloud/debian-9"
    "w2k3" = "windows-cloud/windows-2016-core"
    "w2k8" = "windows-cloud/windows-2008-r2"
    "w2k12" = "windows-cloud/windows-2012-r2"
    "w2k16" = "windows-cloud/windows-2016"
  }
}

provider "google" {
  credentials = "${file("{{ index $.Build.Config "gcp_cred_file" }}")}"
  project = "{{ index $.Build.Config "gcp_project" }}"
  region = "{{ index $.Build.Config "gcp_region" }}"
}

{{ $dnsz := index $.Build.Config "gcp_dns_zone_id" }}

data "google_dns_managed_zone" "{{ $dnsz }}" {
  name = "{{ $dnsz }}"
}

resource "google_compute_network" "vpc" {
  name = "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-vpc"
  auto_create_subnetworks = false
}

{{ $teamrev := (index $.Laforge.StateManager.NewRevs $.Team.Path) }}
{{ $teamrev = $teamrev.Touch }}

resource "local_file" "team_lf_revision" {
  content = {{ $teamrev.ToJSONString | hclstring }}
  filename = "./.team.lfrevision"

  depends_on = [
    "google_compute_network.vpc",
  ]
}

resource "google_compute_firewall" "allow_icmp" {
  name = "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-allow-icmp"
  network = "${google_compute_network.vpc.self_link}"

  allow {
    protocol = "icmp"
  }

  allow {
    protocol = "tcp"
  }

  allow {
    protocol = "udp"
  }

  source_ranges = [
    "{{ index $.Build.Config "vpc_cidr" }}",
  ]
}

resource "google_compute_firewall" "allow_admin" {
  name = "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-allow-admin"
  network = "${google_compute_network.vpc.self_link}"

  allow {
    protocol = "icmp"
  }

  allow {
    protocol = "tcp"
  }

  allow {
    protocol = "udp"
  }

  source_ranges = [
    "{{ index $.Build.Config "admin_ip" }}/32",
    {{ range $_, $cidr := $.Environment.AdminCIDRs }}
    "{{ $cidr }}",
    {{ end }}
  ]
}

resource "google_compute_firewall" "allow_vdi_ext" {
  name = "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-allow-vdi-ext"
  network = "${google_compute_network.vpc.self_link}"

  allow {
    protocol = "tcp"
    ports = [
      "22",
      "3389",
    ]
  }

  source_ranges = [
    "{{ index $.Build.Config "vdi_whitelist" }}",
  ]

  target_tags = [
    "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-vdi",
  ]
}

resource "google_compute_firewall" "allow_vdi_int" {
  name = "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-allow-vdi-int"
  network = "${google_compute_network.vpc.self_link}"

  allow {
    protocol = "icmp"
  }

  allow {
    protocol = "tcp"
  }

  allow {
    protocol = "udp"
  }

  source_ranges = [
    "{{ index $.Build.Config "vpc_cidr" }}",
  ]
}

resource "google_compute_firewall" "deny_mgmt_int" {
  name = "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-deny-mgmt-int"
  network = "${google_compute_network.vpc.self_link}"


  deny {
    protocol = "tcp"
    ports = [ "9971" ]
  }

  source_ranges = [
    "{{ index $.Build.Config "vpc_cidr" }}",
  ]
}


{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
{{ $net := $pnet.Network }}
{{ $netname := $net.Path }}
// network = {{ $netname }}
resource "google_compute_subnetwork" "{{ $net.Base }}" {
  name = "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-{{ $net.Base }}"
  ip_cidr_range = "{{ $net.CIDR }}"
  region = "{{ index $.Build.Config "gcp_region" }}"
  network = "${google_compute_network.vpc.self_link}"
}

{{ $pnetrev := (index $.Laforge.StateManager.NewRevs $pnetid) }}
{{ $pnetrev = $pnetrev.Touch }}

resource "local_file" "lfrev-{{ $pnet.Base }}" {
  content = {{ $pnetrev.ToJSONString | hclstring }}
  filename = "./networks/{{ $pnet.Base }}/.provisioned_network.lfrevision"

  depends_on = [
    "google_compute_subnetwork.{{ $net.Base }}",
  ]
}
{{ end }}

{{ $dns_resource_name := "" }}

{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
  {{ $netobj := $pnet.Network }}
  {{ range $phostid, $phost := $pnet.ProvisionedHosts }}
    {{ $host := $phost.Host }}
    {{ if eq $host.Base "ns01" }}
      {{ $dns_resource_name = printf "%s-t%d-%s-%s" $.Environment.Base $.Team.TeamNumber $netobj.Base $host.Base }}
    {{ end }}
  {{ end }}
{{ end }}

{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
  {{ $netobj := $pnet.Network }}
  {{ range $phostid, $phost := $pnet.ProvisionedHosts }}
    {{ $host := $phost.Host }}
    {{ $resource_name := printf "%s-t%d-%s-%s" $.Environment.Base $.Team.TeamNumber $netobj.Base $host.Base }}

    resource "google_compute_address" "{{ $resource_name }}" {
      name = "{{ $resource_name }}"
    }

    resource "google_compute_instance" "{{ $resource_name }}" {
      name = "{{ $resource_name }}"
      machine_type = "${var.vmsize["{{ $host.InstanceSize }}"]}"
      zone = "{{ index $.Build.Config "gcp_zone" }}"

      boot_disk {
        initialize_params {
          size = "{{ $host.Disk.Size }}"
          type = "pd-ssd"
          image = "${var.vmos["{{ $host.OS }}"]}"
        }
      }

      network_interface {
        subnetwork = "${google_compute_subnetwork.{{ $netobj.Base }}.self_link}"
        network_ip = "${cidrhost("{{ $netobj.CIDR }}", {{ $host.LastOctet }})}"

        access_config {
          nat_ip = "${google_compute_address.{{ $resource_name }}.address}"
        }
      }

      {{ $uds := (index $host.Scripts (index $host.Vars "user_data_script_id")) }}

      metadata {
        hostname = "{{ $host.Hostname }}.{{ $netobj.Name }}.{{ $.Competition.DNS.RootDomain }}"
        {{ if $host.IsWindows }}
        windows-startup-script-ps1 = "net user administrator /active:yes"
        sysprep-specialize-script-ps1 = "${file("{{ $.Build.RelAssetForTeam $netobj.Base $host.Base $uds.SourceBase }}")}"
        {{ else }}
        sshKeys = <<EOF
root:${chomp(file("{{ index $.Build.Config "rel_ssh_public_key_file" }}"))} root@laforge
root:{{ index $.Build.Config "gcp_project_ssh_pubkey" }} root@admin.cptc.network
EOF

        {{ end }}
      }


      {{ if ne $host.IsWindows true }}
      metadata_startup_script = "${file("{{ $.Build.RelAssetForTeam $netobj.Base $host.Base $uds.SourceBase }}")}"
      {{ end }}

      tags = [
        "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-{{ $netobj.Base }}",
        "{{ $netobj.Base }}",
        "{{ $host.Hostname }}",
        "t{{ $.Team.TeamNumber }}",
        "{{ $.Environment.Base }}",
        "{{ $.Competition.ID }}",
        "{{ $host.Base }}",
        "{{ $resource_name }}",
      ]

      provisioner "file" {
        {{ if $host.IsWindows }}
          connection {
            host     = "${google_compute_address.{{ $resource_name }}.address}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $phost.ActualPassword }}"
          }
        {{ else }}
          connection {
            agent       = "false"
            host        = "${google_compute_address.{{ $resource_name }}.address}"
            type        = "ssh"
            user        = "root"
            timeout     = "60m"
            private_key = "${file("{{ index $.Build.Config "rel_ssh_private_key_file" }}")}"
          }
        {{ end }}

        source = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/agent"
        {{ if $host.IsWindows }}
          destination = "C:\\laforge-agent"
        {{ else }}
          destination = "/opt/laforge-agent"
        {{ end }}
      }
    }

    {{ $phostrev := (index $.Laforge.StateManager.NewRevs $phostid) }}
    {{ $phostrev = $phostrev.TouchWithID $resource_name }}

    resource "local_file" "lfrev-{{ $resource_name }}-host" {
      content = {{ $phostrev.ToJSONString | hclstring }}
      filename = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/.provisioned_host.lfrevision"

      depends_on = [
        "google_compute_instance.{{ $resource_name }}",
      ]
    }

    output "{{ $host.Base }}-private_ip" {
      value = "${google_compute_instance.{{ $resource_name }}.network_interface.0.network_ip}"
    }

    output "{{ $host.Base }}-public_ip" {
      value = "${google_compute_instance.{{ $resource_name }}.network_interface.0.access_config.0.nat_ip}"
    }

    {{ if $host.TagEquals "vdi" "true" }}
    resource "google_dns_record_set" "{{ $resource_name }}" {
      managed_zone = "${data.google_dns_managed_zone.{{ $dnsz }}.name}"

      name = "{{ $host.Hostname }}.{{ $netobj.Name }}.t{{ $.Team.TeamNumber }}.{{ $.Environment.Base }}.${data.google_dns_managed_zone.{{ $dnsz }}.dns_name}"
      type = "A"
      ttl = "300"

      rrdatas = [
        "${google_compute_instance.{{ $resource_name }}.network_interface.0.access_config.0.nat_ip}",
      ]
    }
    {{ end }}

    data "template_file" "{{ $resource_name }}" {
      template = "${file("{{ $.Build.RelAssetForTeam $netobj.Base $host.Base "provisioned_host.tpl" }}")}"

      vars {
        remote_addr = "${google_compute_instance.{{ $resource_name }}.network_interface.0.access_config.0.nat_ip}"
        local_addr = "${google_compute_instance.{{ $resource_name }}.network_interface.0.network_ip}"
        host_active = "true"
        resource_name = "google_compute_instance.{{ $resource_name }}"
        {{ if $host.IsWindows }}
        password = "{{ $phost.ActualPassword }}"
        {{ else }}
        identity_file = "{{ index $.Build.Config "rel_ssh_private_key_file" }}"
        {{ end }}
      }

      depends_on = [
        "google_compute_instance.{{ $resource_name }}",
      ]
    }

    resource "local_file" "{{ $resource_name }}_provisioning_file" {
      content = "${data.template_file.{{ $resource_name }}.rendered}"
      filename = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/conn.laforge"

      depends_on = [
        "google_compute_instance.{{ $resource_name }}",
      ]
    }

    {{ $phostconnrev := (index $.Laforge.StateManager.NewRevs $phost.Conn.Path) }}
    {{ $phostconnrev = $phostconnrev.TouchWithID $resource_name }}

    resource "local_file" "lfrev-{{ $resource_name }}-conn" {
      content = {{ $phostconnrev.ToJSONString | hclstring }}
      filename = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/.connection.lfrevision"

      depends_on = [
        "google_compute_instance.{{ $resource_name }}",
      ]
    }
  {{ end }}
{{ end }}

